/* tslint:disable */
/* eslint-disable */
/*
Testing API

Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform. 

We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.

Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DeviceAppendDumpFile401Response } from '../models';
// @ts-ignore
import { DeviceAppendDumpFileRequest } from '../models';
// @ts-ignore
import { DeviceAppendDumpFileResponse } from '../models';
// @ts-ignore
import { DeviceCloseIncident401Response } from '../models';
// @ts-ignore
import { DeviceCloseIncident404Response } from '../models';
// @ts-ignore
import { DeviceCloseIncidentResponse } from '../models';
// @ts-ignore
import { DeviceCreateRegistration400Response } from '../models';
// @ts-ignore
import { DeviceCreateRegistration422Response } from '../models';
// @ts-ignore
import { DeviceCreateRegistrationRequest } from '../models';
// @ts-ignore
import { DeviceCreateRegistrationResponse } from '../models';
// @ts-ignore
import { DeviceDeleteDevice401Response } from '../models';
// @ts-ignore
import { DeviceDeleteDevice404Response } from '../models';
// @ts-ignore
import { DeviceDeleteDeviceResponse } from '../models';
// @ts-ignore
import { DeviceGetAllDeviceStateHistories401Response } from '../models';
// @ts-ignore
import { DeviceGetChildDevices401Response } from '../models';
// @ts-ignore
import { DeviceGetChildDevicesResponseInner } from '../models';
// @ts-ignore
import { DeviceGetCommand401Response } from '../models';
// @ts-ignore
import { DeviceGetConfig200Response } from '../models';
// @ts-ignore
import { DeviceGetConfig401Response } from '../models';
// @ts-ignore
import { DeviceGetConfig404Response } from '../models';
// @ts-ignore
import { DeviceGetConfigResponse } from '../models';
// @ts-ignore
import { DeviceGetFile400Response } from '../models';
// @ts-ignore
import { DeviceGetFiles400Response } from '../models';
// @ts-ignore
import { DeviceGetIncidents401Response } from '../models';
// @ts-ignore
import { DeviceGetIncidents404Response } from '../models';
// @ts-ignore
import { DeviceGetIncidentsResponse } from '../models';
// @ts-ignore
import { DeviceGetInfo200Response } from '../models';
// @ts-ignore
import { DeviceGetInfo400Response } from '../models';
// @ts-ignore
import { DeviceGetInfo401Response } from '../models';
// @ts-ignore
import { DeviceGetInfoResponse } from '../models';
// @ts-ignore
import { DeviceGetLicense401Response } from '../models';
// @ts-ignore
import { DeviceGetLicenseResponse } from '../models';
// @ts-ignore
import { DeviceGetLicenses401Response } from '../models';
// @ts-ignore
import { DeviceGetLicensesResponse } from '../models';
// @ts-ignore
import { DeviceGetSpaceInfo422Response } from '../models';
// @ts-ignore
import { DeviceGetSpaceInfoResponse } from '../models';
// @ts-ignore
import { DeviceGetStateHistory401Response } from '../models';
// @ts-ignore
import { DeviceGetStateHistory404Response } from '../models';
// @ts-ignore
import { DeviceGetTelemetries401Response } from '../models';
// @ts-ignore
import { DeviceGetTelemetries404Response } from '../models';
// @ts-ignore
import { DeviceGetTelemetriesResponseInner } from '../models';
// @ts-ignore
import { DeviceListCommands401Response } from '../models';
// @ts-ignore
import { DeviceListCommands404Response } from '../models';
// @ts-ignore
import { DeviceListCommandsResponse } from '../models';
// @ts-ignore
import { DeviceListDevices401Response } from '../models';
// @ts-ignore
import { DeviceListDevicesResponse } from '../models';
// @ts-ignore
import { DeviceOpenIncident401Response } from '../models';
// @ts-ignore
import { DeviceOpenIncident422Response } from '../models';
// @ts-ignore
import { DeviceOpenIncidentRequest } from '../models';
// @ts-ignore
import { DeviceOpenIncidentResponse } from '../models';
// @ts-ignore
import { DeviceRegisterChildDevice401Response } from '../models';
// @ts-ignore
import { DeviceRegisterChildDevice404Response } from '../models';
// @ts-ignore
import { DeviceRegisterChildDeviceRequest } from '../models';
// @ts-ignore
import { DeviceRegisterChildDeviceResponse } from '../models';
// @ts-ignore
import { DeviceSendChildTelemetries401Response } from '../models';
// @ts-ignore
import { DeviceSendChildTelemetries422Response } from '../models';
// @ts-ignore
import { DeviceSendChildTelemetriesRequest } from '../models';
// @ts-ignore
import { DeviceSendChildTelemetriesResponse } from '../models';
// @ts-ignore
import { DeviceSendCommand401Response } from '../models';
// @ts-ignore
import { DeviceSendCommand404Response } from '../models';
// @ts-ignore
import { DeviceSendCommand422Response } from '../models';
// @ts-ignore
import { DeviceSendCommandRequest } from '../models';
// @ts-ignore
import { DeviceSendCommandResponse } from '../models';
// @ts-ignore
import { DeviceSendDumpFile401Response } from '../models';
// @ts-ignore
import { DeviceSendDumpFile422Response } from '../models';
// @ts-ignore
import { DeviceSendDumpFileRequest } from '../models';
// @ts-ignore
import { DeviceSendDumpFileResponse } from '../models';
// @ts-ignore
import { DeviceSendTelemetry401Response } from '../models';
// @ts-ignore
import { DeviceSendTelemetry422Response } from '../models';
// @ts-ignore
import { DeviceSendTelemetryRequest } from '../models';
// @ts-ignore
import { DeviceSendTelemetryResponse } from '../models';
// @ts-ignore
import { DeviceSetConfig401Response } from '../models';
// @ts-ignore
import { DeviceSetConfig422Response } from '../models';
// @ts-ignore
import { DeviceSetConfigRequest } from '../models';
// @ts-ignore
import { DeviceSetConfigResponse } from '../models';
// @ts-ignore
import { DeviceUpdateCloudSettings401Response } from '../models';
// @ts-ignore
import { DeviceUpdateCloudSettingsRequest } from '../models';
// @ts-ignore
import { DeviceUpdateDevice401Response } from '../models';
// @ts-ignore
import { DeviceUpdateDeviceRequest } from '../models';
// @ts-ignore
import { DeviceUpdateDeviceResponse } from '../models';
// @ts-ignore
import { DeviceUpdateLicense401Response } from '../models';
// @ts-ignore
import { DeviceUpdateLicense404Response } from '../models';
// @ts-ignore
import { DeviceUpdateLicense422Response } from '../models';
// @ts-ignore
import { DeviceUpdateLicenseRequest } from '../models';
// @ts-ignore
import { DeviceUpdateLicenseResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export const DeviceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Append Dump File
         * @param {string} deviceId 
         * @param {string} dumpId 
         * @param {DeviceAppendDumpFileRequest} [deviceAppendDumpFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendDumpFile: async (deviceId: string, dumpId: string, deviceAppendDumpFileRequest?: DeviceAppendDumpFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('appendDumpFile', 'deviceId', deviceId)
            // verify required parameter 'dumpId' is not null or undefined
            assertParamExists('appendDumpFile', 'dumpId', dumpId)
            const localVarPath = `/v1/devices/{deviceId}/dumps/{dumpId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)))
                .replace(`{${"dumpId"}}`, encodeURIComponent(String(dumpId !== undefined ? dumpId : `-dumpId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceAppendDumpFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/dumps/{dumpId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceAppendDumpFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Close Incident
         * @param {string} deviceId Unique Device ID
         * @param {string} incidentId The unique id of the incident to close
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeIncident: async (deviceId: string, incidentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('closeIncident', 'deviceId', deviceId)
            // verify required parameter 'incidentId' is not null or undefined
            assertParamExists('closeIncident', 'incidentId', incidentId)
            const localVarPath = `/v1/devices/{deviceId}/incidents/{incidentId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)))
                .replace(`{${"incidentId"}}`, encodeURIComponent(String(incidentId !== undefined ? incidentId : `-incidentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/incidents/{incidentId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register Device
         * @param {DeviceCreateRegistrationRequest} [deviceCreateRegistrationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration: async (deviceCreateRegistrationRequest?: DeviceCreateRegistrationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceCreateRegistrationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceCreateRegistrationRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Device
         * @param {string} deviceId Device\&#39;s unique ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('deleteDevice', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Device\'s State History
         * @param {string} [status] Filter by state: online, offline, unavailable, error
         * @param {string} [from] Query range
         * @param {string} [to] Query range
         * @param {number} [page] Pagination (500 records per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeviceStateHistories: async (status?: string, from?: string, to?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v1/partner/devices/histories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/histories',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Child Devices
         * @param {string} parentId The ID of the parent device
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildDevices: async (parentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('getChildDevices', 'parentId', parentId)
            const localVarPath = `/v1/devices/{parent_id}/children`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId !== undefined ? parentId : `-parent_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{parent_id}/children',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Command
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommand: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getCommand', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/command`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/command',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Config
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getConfig', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/config`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/config',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device Configuration
         * @param {string} deviceId Unique Device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig_1: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getConfig_1', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}/config`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}/config',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get File
         * @param {string} deviceId 
         * @param {string} fileUuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile: async (deviceId: string, fileUuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getFile', 'deviceId', deviceId)
            // verify required parameter 'fileUuid' is not null or undefined
            assertParamExists('getFile', 'fileUuid', fileUuid)
            const localVarPath = `/v1/devices/{deviceId}/files/{fileUuid}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)))
                .replace(`{${"fileUuid"}}`, encodeURIComponent(String(fileUuid !== undefined ? fileUuid : `-fileUuid-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/files/{fileUuid}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Files
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getFiles', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/files`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/files',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Incidents
         * @param {string} deviceId Device\&#39;s unique ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidents: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getIncidents', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/incidents`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/incidents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device Info
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getInfo', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device Info
         * @param {string} deviceId Device\&#39;s unique ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo_2: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getInfo_2', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get License
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicense: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getLicense', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/license`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/license',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Licenses
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getLicenses', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/licenses`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/licenses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Space Info
         * @param {string} deviceId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceInfo: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getSpaceInfo', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/space`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/space',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device State History
         * @param {string} deviceId Unique Device ID
         * @param {string} [status] Filter by state: online, offline, unavailable, error
         * @param {string} [from] Query range
         * @param {string} [to] Query range
         * @param {number} [page] Pagination (500 records per page)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateHistory: async (deviceId: string, status?: string, from?: string, to?: string, page?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getStateHistory', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}/history`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString() :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString() :
                    to;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}/history',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device Telemetries
         * @param {string} deviceId Unique Device ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTelemetries: async (deviceId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('getTelemetries', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}/telemetries`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}/telemetries',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Device Commands
         * @param {string} deviceId Unique Device ID
         * @param {string} [status] Filter by command status: scheduled, pending, done, failed, aborted, in_progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCommands: async (deviceId: string, status?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('listCommands', 'deviceId', deviceId)
            const localVarPath = `/core/v1/partner/devices/{device_id}/commands`
                .replace(`{${"device_id"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-device_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices/{device_id}/commands',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Devices
         * @param {string} [modelId] Filter by model id
         * @param {string} [sn] Filter by Serial Number
         * @param {string} [mac] Filter by MAC address
         * @param {string} [page] Pagination selector
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: async (modelId?: string, sn?: string, mac?: string, page?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v1/partner/devices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })
            if (modelId !== undefined) {
                localVarQueryParameter['model_id'] = modelId;
            }

            if (sn !== undefined) {
                localVarQueryParameter['sn'] = sn;
            }

            if (mac !== undefined) {
                localVarQueryParameter['mac'] = mac;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/devices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Open Incident
         * @param {string} deviceId 
         * @param {DeviceOpenIncidentRequest} [deviceOpenIncidentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIncident: async (deviceId: string, deviceOpenIncidentRequest?: DeviceOpenIncidentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('openIncident', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/incidents`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceOpenIncidentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/incidents',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceOpenIncidentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register Child Device
         * @param {string} parentId The ID of the parent device
         * @param {DeviceRegisterChildDeviceRequest} [deviceRegisterChildDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerChildDevice: async (parentId: string, deviceRegisterChildDeviceRequest?: DeviceRegisterChildDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'parentId' is not null or undefined
            assertParamExists('registerChildDevice', 'parentId', parentId)
            const localVarPath = `/v1/devices/{parent_id}/children`
                .replace(`{${"parent_id"}}`, encodeURIComponent(String(parentId !== undefined ? parentId : `-parent_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceRegisterChildDeviceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{parent_id}/children',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceRegisterChildDeviceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Child Telemetries
         * @param {string} deviceId 
         * @param {DeviceSendChildTelemetriesRequest} [deviceSendChildTelemetriesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChildTelemetries: async (deviceId: string, deviceSendChildTelemetriesRequest?: DeviceSendChildTelemetriesRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('sendChildTelemetries', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/children/telemetries`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceSendChildTelemetriesRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/children/telemetries',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSendChildTelemetriesRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Command
         * @param {string} deviceId 
         * @param {DeviceSendCommandRequest} [deviceSendCommandRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCommand: async (deviceId: string, deviceSendCommandRequest?: DeviceSendCommandRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('sendCommand', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/command`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceSendCommandRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/command',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSendCommandRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Dump
         * @param {string} deviceId 
         * @param {string} mimeType 
         * @param {string} filename 
         * @param {DeviceSendDumpFileRequest} [deviceSendDumpFileRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDumpFile: async (deviceId: string, mimeType: string, filename: string, deviceSendDumpFileRequest?: DeviceSendDumpFileRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('sendDumpFile', 'deviceId', deviceId)
            // verify required parameter 'mimeType' is not null or undefined
            assertParamExists('sendDumpFile', 'mimeType', mimeType)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('sendDumpFile', 'filename', filename)
            const localVarPath = `/v1/devices/{deviceId}/dumps/{mime-type}/{filename}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)))
                .replace(`{${"mime-type"}}`, encodeURIComponent(String(mimeType !== undefined ? mimeType : `-mime-type-`)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename !== undefined ? filename : `-filename-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceSendDumpFileRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/dumps/{mime-type}/{filename}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSendDumpFileRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Send Telemetry
         * @param {string} deviceId 
         * @param {DeviceSendTelemetryRequest} [deviceSendTelemetryRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTelemetry: async (deviceId: string, deviceSendTelemetryRequest?: DeviceSendTelemetryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('sendTelemetry', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/telemetry`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceSendTelemetryRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/telemetry',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSendTelemetryRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Config
         * @param {string} deviceId 
         * @param {DeviceSetConfigRequest} [deviceSetConfigRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfig: async (deviceId: string, deviceSetConfigRequest?: DeviceSetConfigRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('setConfig', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/config`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceSetConfigRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/config',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceSetConfigRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set Cloud Settings
         * @param {string} deviceId 
         * @param {DeviceUpdateCloudSettingsRequest} [deviceUpdateCloudSettingsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCloudSettings: async (deviceId: string, deviceUpdateCloudSettingsRequest?: DeviceUpdateCloudSettingsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateCloudSettings', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/cloud_settings`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceUpdateCloudSettingsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/cloud_settings',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateCloudSettingsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Device
         * @param {string} deviceId 
         * @param {DeviceUpdateDeviceRequest} [deviceUpdateDeviceRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice: async (deviceId: string, deviceUpdateDeviceRequest?: DeviceUpdateDeviceRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateDevice', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceUpdateDeviceRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateDeviceRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update License
         * @param {string} deviceId 
         * @param {DeviceUpdateLicenseRequest} [deviceUpdateLicenseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicense: async (deviceId: string, deviceUpdateLicenseRequest?: DeviceUpdateLicenseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceId' is not null or undefined
            assertParamExists('updateLicense', 'deviceId', deviceId)
            const localVarPath = `/v1/devices/{deviceId}/licenses`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId !== undefined ? deviceId : `-deviceId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: deviceUpdateLicenseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1/devices/{deviceId}/licenses',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(deviceUpdateLicenseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeviceApi - functional programming interface
 * @export
 */
export const DeviceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Append Dump File
         * @param {DeviceApiAppendDumpFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appendDumpFile(requestParameters: DeviceApiAppendDumpFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceAppendDumpFileResponse>> {
            const deviceAppendDumpFileRequest: DeviceAppendDumpFileRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.appendDumpFile(requestParameters.deviceId, requestParameters.dumpId, deviceAppendDumpFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Close Incident
         * @param {DeviceApiCloseIncidentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async closeIncident(requestParameters: DeviceApiCloseIncidentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCloseIncidentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.closeIncident(requestParameters.deviceId, requestParameters.incidentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register Device
         * @param {DeviceApiCreateRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRegistration(requestParameters: DeviceApiCreateRegistrationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceCreateRegistrationResponse>> {
            const deviceCreateRegistrationRequest: DeviceCreateRegistrationRequest = {
                mac: requestParameters.mac,
                sn: requestParameters.sn,
                cloud_id: requestParameters.cloud_id,
                firmware_version: requestParameters.firmware_version,
                hardware_key: requestParameters.hardware_key,
                name: requestParameters.name,
                details: requestParameters.details,
                sub_model: requestParameters.sub_model,
                parent_id: requestParameters.parent_id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRegistration(deviceCreateRegistrationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Device
         * @param {DeviceApiDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(requestParameters: DeviceApiDeleteDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceDeleteDeviceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDevice(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Device\'s State History
         * @param {DeviceApiGetAllDeviceStateHistoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllDeviceStateHistories(requestParameters: DeviceApiGetAllDeviceStateHistoriesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllDeviceStateHistories(requestParameters.status, requestParameters.from, requestParameters.to, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Child Devices
         * @param {DeviceApiGetChildDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChildDevices(requestParameters: DeviceApiGetChildDevicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceGetChildDevicesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChildDevices(requestParameters.parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Command
         * @param {DeviceApiGetCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommand(requestParameters: DeviceApiGetCommandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCommand(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Config
         * @param {DeviceApiGetConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig(requestParameters: DeviceApiGetConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetConfigResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device Configuration
         * @param {DeviceApiGetConfig0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfig_1(requestParameters: DeviceApiGetConfig0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetConfig200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfig_1(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get File
         * @param {DeviceApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFile(requestParameters: DeviceApiGetFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFile(requestParameters.deviceId, requestParameters.fileUuid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Files
         * @param {DeviceApiGetFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(requestParameters: DeviceApiGetFilesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFiles(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Incidents
         * @param {DeviceApiGetIncidentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIncidents(requestParameters: DeviceApiGetIncidentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetIncidentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIncidents(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device Info
         * @param {DeviceApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(requestParameters: DeviceApiGetInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device Info
         * @param {DeviceApiGetInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo_2(requestParameters: DeviceApiGetInfo0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetInfo200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo_2(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get License
         * @param {DeviceApiGetLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicense(requestParameters: DeviceApiGetLicenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetLicenseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicense(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Licenses
         * @param {DeviceApiGetLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLicenses(requestParameters: DeviceApiGetLicensesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetLicensesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLicenses(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Space Info
         * @param {DeviceApiGetSpaceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpaceInfo(requestParameters: DeviceApiGetSpaceInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceGetSpaceInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpaceInfo(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device State History
         * @param {DeviceApiGetStateHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStateHistory(requestParameters: DeviceApiGetStateHistoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStateHistory(requestParameters.deviceId, requestParameters.status, requestParameters.from, requestParameters.to, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device Telemetries
         * @param {DeviceApiGetTelemetriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTelemetries(requestParameters: DeviceApiGetTelemetriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeviceGetTelemetriesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTelemetries(requestParameters.deviceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Device Commands
         * @param {DeviceApiListCommandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCommands(requestParameters: DeviceApiListCommandsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListCommandsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCommands(requestParameters.deviceId, requestParameters.status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Devices
         * @param {DeviceApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevices(requestParameters: DeviceApiListDevicesRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListDevicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDevices(requestParameters.modelId, requestParameters.sn, requestParameters.mac, requestParameters.page, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Open Incident
         * @param {DeviceApiOpenIncidentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async openIncident(requestParameters: DeviceApiOpenIncidentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceOpenIncidentResponse>> {
            const deviceOpenIncidentRequest: DeviceOpenIncidentRequest = {
                title: requestParameters.title,
                description: requestParameters.description,
                priority: requestParameters.priority,
                issue: requestParameters.issue,
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.openIncident(requestParameters.deviceId, deviceOpenIncidentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register Child Device
         * @param {DeviceApiRegisterChildDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerChildDevice(requestParameters: DeviceApiRegisterChildDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceRegisterChildDeviceResponse>> {
            const deviceRegisterChildDeviceRequest: DeviceRegisterChildDeviceRequest = {
                firmware_version: requestParameters.firmware_version,
                model_id: requestParameters.model_id,
                sub_model: requestParameters.sub_model,
                sn: requestParameters.sn,
                mac: requestParameters.mac,
                name: requestParameters.name,
                details: requestParameters.details
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerChildDevice(requestParameters.parentId, deviceRegisterChildDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send Child Telemetries
         * @param {DeviceApiSendChildTelemetriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendChildTelemetries(requestParameters: DeviceApiSendChildTelemetriesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSendChildTelemetriesResponse>> {
            const deviceSendChildTelemetriesRequest: DeviceSendChildTelemetriesRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendChildTelemetries(requestParameters.deviceId, deviceSendChildTelemetriesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Command
         * @param {DeviceApiSendCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendCommand(requestParameters: DeviceApiSendCommandRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSendCommandResponse>> {
            const deviceSendCommandRequest: DeviceSendCommandRequest = {
                status: requestParameters.status,
                message: requestParameters.message,
                id: requestParameters.id
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendCommand(requestParameters.deviceId, deviceSendCommandRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send Dump
         * @param {DeviceApiSendDumpFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendDumpFile(requestParameters: DeviceApiSendDumpFileRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSendDumpFileResponse>> {
            const deviceSendDumpFileRequest: DeviceSendDumpFileRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendDumpFile(requestParameters.deviceId, requestParameters.mimeType, requestParameters.filename, deviceSendDumpFileRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Send Telemetry
         * @param {DeviceApiSendTelemetryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTelemetry(requestParameters: DeviceApiSendTelemetryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSendTelemetryResponse>> {
            const deviceSendTelemetryRequest: DeviceSendTelemetryRequest = {
                status: requestParameters.status,
                timestamp: requestParameters.timestamp,
                telemetries: requestParameters.telemetries,
                override: requestParameters.override
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTelemetry(requestParameters.deviceId, deviceSendTelemetryRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Config
         * @param {DeviceApiSetConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setConfig(requestParameters: DeviceApiSetConfigRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceSetConfigResponse>> {
            const deviceSetConfigRequest: DeviceSetConfigRequest = {
                RAW_BODY: requestParameters.RAW_BODY
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.setConfig(requestParameters.deviceId, deviceSetConfigRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set Cloud Settings
         * @param {DeviceApiUpdateCloudSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCloudSettings(requestParameters: DeviceApiUpdateCloudSettingsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const deviceUpdateCloudSettingsRequest: DeviceUpdateCloudSettingsRequest = {
                property: requestParameters.property,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCloudSettings(requestParameters.deviceId, deviceUpdateCloudSettingsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Device
         * @param {DeviceApiUpdateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice(requestParameters: DeviceApiUpdateDeviceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdateDeviceResponse>> {
            const deviceUpdateDeviceRequest: DeviceUpdateDeviceRequest = {
                firmware_version: requestParameters.firmware_version,
                name: requestParameters.name,
                space_version: requestParameters.space_version,
                config_version: requestParameters.config_version,
                details: requestParameters.details
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDevice(requestParameters.deviceId, deviceUpdateDeviceRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update License
         * @param {DeviceApiUpdateLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateLicense(requestParameters: DeviceApiUpdateLicenseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceUpdateLicenseResponse>> {
            const deviceUpdateLicenseRequest: DeviceUpdateLicenseRequest = {
                id: requestParameters.id,
                state: requestParameters.state,
                error: requestParameters.error
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateLicense(requestParameters.deviceId, deviceUpdateLicenseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeviceApi - factory interface
 * @export
 */
export const DeviceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeviceApiFp(configuration)
    return {
        /**
         * 
         * @summary Append Dump File
         * @param {DeviceApiAppendDumpFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appendDumpFile(requestParameters: DeviceApiAppendDumpFileRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceAppendDumpFileResponse> {
            return localVarFp.appendDumpFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Close Incident
         * @param {DeviceApiCloseIncidentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        closeIncident(requestParameters: DeviceApiCloseIncidentRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceCloseIncidentResponse> {
            return localVarFp.closeIncident(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register Device
         * @param {DeviceApiCreateRegistrationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRegistration(requestParameters: DeviceApiCreateRegistrationRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceCreateRegistrationResponse> {
            return localVarFp.createRegistration(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Device
         * @param {DeviceApiDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(requestParameters: DeviceApiDeleteDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceDeleteDeviceResponse> {
            return localVarFp.deleteDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Device\'s State History
         * @param {DeviceApiGetAllDeviceStateHistoriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllDeviceStateHistories(requestParameters: DeviceApiGetAllDeviceStateHistoriesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAllDeviceStateHistories(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Child Devices
         * @param {DeviceApiGetChildDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChildDevices(requestParameters: DeviceApiGetChildDevicesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DeviceGetChildDevicesResponseInner>> {
            return localVarFp.getChildDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Command
         * @param {DeviceApiGetCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommand(requestParameters: DeviceApiGetCommandRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getCommand(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Config
         * @param {DeviceApiGetConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig(requestParameters: DeviceApiGetConfigRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetConfigResponse> {
            return localVarFp.getConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device Configuration
         * @param {DeviceApiGetConfig0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfig_1(requestParameters: DeviceApiGetConfig0Request, options?: AxiosRequestConfig): AxiosPromise<DeviceGetConfig200Response> {
            return localVarFp.getConfig_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get File
         * @param {DeviceApiGetFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFile(requestParameters: DeviceApiGetFileRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Files
         * @param {DeviceApiGetFilesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(requestParameters: DeviceApiGetFilesRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getFiles(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Incidents
         * @param {DeviceApiGetIncidentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIncidents(requestParameters: DeviceApiGetIncidentsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetIncidentsResponse> {
            return localVarFp.getIncidents(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device Info
         * @param {DeviceApiGetInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(requestParameters: DeviceApiGetInfoRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetInfoResponse> {
            return localVarFp.getInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device Info
         * @param {DeviceApiGetInfo0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo_2(requestParameters: DeviceApiGetInfo0Request, options?: AxiosRequestConfig): AxiosPromise<DeviceGetInfo200Response> {
            return localVarFp.getInfo_2(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get License
         * @param {DeviceApiGetLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicense(requestParameters: DeviceApiGetLicenseRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetLicenseResponse> {
            return localVarFp.getLicense(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Licenses
         * @param {DeviceApiGetLicensesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLicenses(requestParameters: DeviceApiGetLicensesRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetLicensesResponse> {
            return localVarFp.getLicenses(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Space Info
         * @param {DeviceApiGetSpaceInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpaceInfo(requestParameters: DeviceApiGetSpaceInfoRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceGetSpaceInfoResponse> {
            return localVarFp.getSpaceInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device State History
         * @param {DeviceApiGetStateHistoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStateHistory(requestParameters: DeviceApiGetStateHistoryRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getStateHistory(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device Telemetries
         * @param {DeviceApiGetTelemetriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTelemetries(requestParameters: DeviceApiGetTelemetriesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<DeviceGetTelemetriesResponseInner>> {
            return localVarFp.getTelemetries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Device Commands
         * @param {DeviceApiListCommandsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCommands(requestParameters: DeviceApiListCommandsRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceListCommandsResponse> {
            return localVarFp.listCommands(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Devices
         * @param {DeviceApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(requestParameters: DeviceApiListDevicesRequest = {}, options?: AxiosRequestConfig): AxiosPromise<DeviceListDevicesResponse> {
            return localVarFp.listDevices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Open Incident
         * @param {DeviceApiOpenIncidentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        openIncident(requestParameters: DeviceApiOpenIncidentRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceOpenIncidentResponse> {
            return localVarFp.openIncident(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register Child Device
         * @param {DeviceApiRegisterChildDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerChildDevice(requestParameters: DeviceApiRegisterChildDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceRegisterChildDeviceResponse> {
            return localVarFp.registerChildDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Child Telemetries
         * @param {DeviceApiSendChildTelemetriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendChildTelemetries(requestParameters: DeviceApiSendChildTelemetriesRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSendChildTelemetriesResponse> {
            return localVarFp.sendChildTelemetries(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Command
         * @param {DeviceApiSendCommandRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendCommand(requestParameters: DeviceApiSendCommandRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSendCommandResponse> {
            return localVarFp.sendCommand(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Dump
         * @param {DeviceApiSendDumpFileRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendDumpFile(requestParameters: DeviceApiSendDumpFileRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSendDumpFileResponse> {
            return localVarFp.sendDumpFile(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Send Telemetry
         * @param {DeviceApiSendTelemetryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTelemetry(requestParameters: DeviceApiSendTelemetryRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSendTelemetryResponse> {
            return localVarFp.sendTelemetry(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Config
         * @param {DeviceApiSetConfigRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfig(requestParameters: DeviceApiSetConfigRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceSetConfigResponse> {
            return localVarFp.setConfig(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set Cloud Settings
         * @param {DeviceApiUpdateCloudSettingsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCloudSettings(requestParameters: DeviceApiUpdateCloudSettingsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateCloudSettings(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Device
         * @param {DeviceApiUpdateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(requestParameters: DeviceApiUpdateDeviceRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceUpdateDeviceResponse> {
            return localVarFp.updateDevice(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update License
         * @param {DeviceApiUpdateLicenseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateLicense(requestParameters: DeviceApiUpdateLicenseRequest, options?: AxiosRequestConfig): AxiosPromise<DeviceUpdateLicenseResponse> {
            return localVarFp.updateLicense(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for appendDumpFile operation in DeviceApi.
 * @export
 * @interface DeviceApiAppendDumpFileRequest
 */
export type DeviceApiAppendDumpFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiAppendDumpFile
    */
    readonly deviceId: string
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiAppendDumpFile
    */
    readonly dumpId: string
    
} & DeviceAppendDumpFileRequest

/**
 * Request parameters for closeIncident operation in DeviceApi.
 * @export
 * @interface DeviceApiCloseIncidentRequest
 */
export type DeviceApiCloseIncidentRequest = {
    
    /**
    * Unique Device ID
    * @type {string}
    * @memberof DeviceApiCloseIncident
    */
    readonly deviceId: string
    
    /**
    * The unique id of the incident to close
    * @type {string}
    * @memberof DeviceApiCloseIncident
    */
    readonly incidentId: string
    
}

/**
 * Request parameters for createRegistration operation in DeviceApi.
 * @export
 * @interface DeviceApiCreateRegistrationRequest
 */
export type DeviceApiCreateRegistrationRequest = {
    
} & DeviceCreateRegistrationRequest

/**
 * Request parameters for deleteDevice operation in DeviceApi.
 * @export
 * @interface DeviceApiDeleteDeviceRequest
 */
export type DeviceApiDeleteDeviceRequest = {
    
    /**
    * Device\'s unique ID
    * @type {string}
    * @memberof DeviceApiDeleteDevice
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getAllDeviceStateHistories operation in DeviceApi.
 * @export
 * @interface DeviceApiGetAllDeviceStateHistoriesRequest
 */
export type DeviceApiGetAllDeviceStateHistoriesRequest = {
    
    /**
    * Filter by state: online, offline, unavailable, error
    * @type {string}
    * @memberof DeviceApiGetAllDeviceStateHistories
    */
    readonly status?: string
    
    /**
    * Query range
    * @type {string}
    * @memberof DeviceApiGetAllDeviceStateHistories
    */
    readonly from?: string
    
    /**
    * Query range
    * @type {string}
    * @memberof DeviceApiGetAllDeviceStateHistories
    */
    readonly to?: string
    
    /**
    * Pagination (500 records per page)
    * @type {number}
    * @memberof DeviceApiGetAllDeviceStateHistories
    */
    readonly page?: number
    
}

/**
 * Request parameters for getChildDevices operation in DeviceApi.
 * @export
 * @interface DeviceApiGetChildDevicesRequest
 */
export type DeviceApiGetChildDevicesRequest = {
    
    /**
    * The ID of the parent device
    * @type {string}
    * @memberof DeviceApiGetChildDevices
    */
    readonly parentId: string
    
}

/**
 * Request parameters for getCommand operation in DeviceApi.
 * @export
 * @interface DeviceApiGetCommandRequest
 */
export type DeviceApiGetCommandRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetCommand
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getConfig operation in DeviceApi.
 * @export
 * @interface DeviceApiGetConfigRequest
 */
export type DeviceApiGetConfigRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetConfig
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getConfig_1 operation in DeviceApi.
 * @export
 * @interface DeviceApiGetConfig0Request
 */
export type DeviceApiGetConfig0Request = {
    
    /**
    * Unique Device ID
    * @type {string}
    * @memberof DeviceApiGetConfig0
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getFile operation in DeviceApi.
 * @export
 * @interface DeviceApiGetFileRequest
 */
export type DeviceApiGetFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetFile
    */
    readonly deviceId: string
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetFile
    */
    readonly fileUuid: string
    
}

/**
 * Request parameters for getFiles operation in DeviceApi.
 * @export
 * @interface DeviceApiGetFilesRequest
 */
export type DeviceApiGetFilesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetFiles
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getIncidents operation in DeviceApi.
 * @export
 * @interface DeviceApiGetIncidentsRequest
 */
export type DeviceApiGetIncidentsRequest = {
    
    /**
    * Device\'s unique ID
    * @type {string}
    * @memberof DeviceApiGetIncidents
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getInfo operation in DeviceApi.
 * @export
 * @interface DeviceApiGetInfoRequest
 */
export type DeviceApiGetInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetInfo
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getInfo_2 operation in DeviceApi.
 * @export
 * @interface DeviceApiGetInfo0Request
 */
export type DeviceApiGetInfo0Request = {
    
    /**
    * Device\'s unique ID
    * @type {string}
    * @memberof DeviceApiGetInfo0
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getLicense operation in DeviceApi.
 * @export
 * @interface DeviceApiGetLicenseRequest
 */
export type DeviceApiGetLicenseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetLicense
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getLicenses operation in DeviceApi.
 * @export
 * @interface DeviceApiGetLicensesRequest
 */
export type DeviceApiGetLicensesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetLicenses
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getSpaceInfo operation in DeviceApi.
 * @export
 * @interface DeviceApiGetSpaceInfoRequest
 */
export type DeviceApiGetSpaceInfoRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiGetSpaceInfo
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for getStateHistory operation in DeviceApi.
 * @export
 * @interface DeviceApiGetStateHistoryRequest
 */
export type DeviceApiGetStateHistoryRequest = {
    
    /**
    * Unique Device ID
    * @type {string}
    * @memberof DeviceApiGetStateHistory
    */
    readonly deviceId: string
    
    /**
    * Filter by state: online, offline, unavailable, error
    * @type {string}
    * @memberof DeviceApiGetStateHistory
    */
    readonly status?: string
    
    /**
    * Query range
    * @type {string}
    * @memberof DeviceApiGetStateHistory
    */
    readonly from?: string
    
    /**
    * Query range
    * @type {string}
    * @memberof DeviceApiGetStateHistory
    */
    readonly to?: string
    
    /**
    * Pagination (500 records per page)
    * @type {number}
    * @memberof DeviceApiGetStateHistory
    */
    readonly page?: number
    
}

/**
 * Request parameters for getTelemetries operation in DeviceApi.
 * @export
 * @interface DeviceApiGetTelemetriesRequest
 */
export type DeviceApiGetTelemetriesRequest = {
    
    /**
    * Unique Device ID
    * @type {string}
    * @memberof DeviceApiGetTelemetries
    */
    readonly deviceId: string
    
}

/**
 * Request parameters for listCommands operation in DeviceApi.
 * @export
 * @interface DeviceApiListCommandsRequest
 */
export type DeviceApiListCommandsRequest = {
    
    /**
    * Unique Device ID
    * @type {string}
    * @memberof DeviceApiListCommands
    */
    readonly deviceId: string
    
    /**
    * Filter by command status: scheduled, pending, done, failed, aborted, in_progress
    * @type {string}
    * @memberof DeviceApiListCommands
    */
    readonly status?: string
    
}

/**
 * Request parameters for listDevices operation in DeviceApi.
 * @export
 * @interface DeviceApiListDevicesRequest
 */
export type DeviceApiListDevicesRequest = {
    
    /**
    * Filter by model id
    * @type {string}
    * @memberof DeviceApiListDevices
    */
    readonly modelId?: string
    
    /**
    * Filter by Serial Number
    * @type {string}
    * @memberof DeviceApiListDevices
    */
    readonly sn?: string
    
    /**
    * Filter by MAC address
    * @type {string}
    * @memberof DeviceApiListDevices
    */
    readonly mac?: string
    
    /**
    * Pagination selector
    * @type {string}
    * @memberof DeviceApiListDevices
    */
    readonly page?: string
    
}

/**
 * Request parameters for openIncident operation in DeviceApi.
 * @export
 * @interface DeviceApiOpenIncidentRequest
 */
export type DeviceApiOpenIncidentRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiOpenIncident
    */
    readonly deviceId: string
    
} & DeviceOpenIncidentRequest

/**
 * Request parameters for registerChildDevice operation in DeviceApi.
 * @export
 * @interface DeviceApiRegisterChildDeviceRequest
 */
export type DeviceApiRegisterChildDeviceRequest = {
    
    /**
    * The ID of the parent device
    * @type {string}
    * @memberof DeviceApiRegisterChildDevice
    */
    readonly parentId: string
    
} & DeviceRegisterChildDeviceRequest

/**
 * Request parameters for sendChildTelemetries operation in DeviceApi.
 * @export
 * @interface DeviceApiSendChildTelemetriesRequest
 */
export type DeviceApiSendChildTelemetriesRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendChildTelemetries
    */
    readonly deviceId: string
    
} & DeviceSendChildTelemetriesRequest

/**
 * Request parameters for sendCommand operation in DeviceApi.
 * @export
 * @interface DeviceApiSendCommandRequest
 */
export type DeviceApiSendCommandRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendCommand
    */
    readonly deviceId: string
    
} & DeviceSendCommandRequest

/**
 * Request parameters for sendDumpFile operation in DeviceApi.
 * @export
 * @interface DeviceApiSendDumpFileRequest
 */
export type DeviceApiSendDumpFileRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendDumpFile
    */
    readonly deviceId: string
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendDumpFile
    */
    readonly mimeType: string
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendDumpFile
    */
    readonly filename: string
    
} & DeviceSendDumpFileRequest

/**
 * Request parameters for sendTelemetry operation in DeviceApi.
 * @export
 * @interface DeviceApiSendTelemetryRequest
 */
export type DeviceApiSendTelemetryRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSendTelemetry
    */
    readonly deviceId: string
    
} & DeviceSendTelemetryRequest

/**
 * Request parameters for setConfig operation in DeviceApi.
 * @export
 * @interface DeviceApiSetConfigRequest
 */
export type DeviceApiSetConfigRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiSetConfig
    */
    readonly deviceId: string
    
} & DeviceSetConfigRequest

/**
 * Request parameters for updateCloudSettings operation in DeviceApi.
 * @export
 * @interface DeviceApiUpdateCloudSettingsRequest
 */
export type DeviceApiUpdateCloudSettingsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiUpdateCloudSettings
    */
    readonly deviceId: string
    
} & DeviceUpdateCloudSettingsRequest

/**
 * Request parameters for updateDevice operation in DeviceApi.
 * @export
 * @interface DeviceApiUpdateDeviceRequest
 */
export type DeviceApiUpdateDeviceRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiUpdateDevice
    */
    readonly deviceId: string
    
} & DeviceUpdateDeviceRequest

/**
 * Request parameters for updateLicense operation in DeviceApi.
 * @export
 * @interface DeviceApiUpdateLicenseRequest
 */
export type DeviceApiUpdateLicenseRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof DeviceApiUpdateLicense
    */
    readonly deviceId: string
    
} & DeviceUpdateLicenseRequest

/**
 * DeviceApiGenerated - object-oriented interface
 * @export
 * @class DeviceApiGenerated
 * @extends {BaseAPI}
 */
export class DeviceApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Append Dump File
     * @param {DeviceApiAppendDumpFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public appendDumpFile(requestParameters: DeviceApiAppendDumpFileRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).appendDumpFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Close Incident
     * @param {DeviceApiCloseIncidentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public closeIncident(requestParameters: DeviceApiCloseIncidentRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).closeIncident(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register Device
     * @param {DeviceApiCreateRegistrationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public createRegistration(requestParameters: DeviceApiCreateRegistrationRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).createRegistration(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Device
     * @param {DeviceApiDeleteDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public deleteDevice(requestParameters: DeviceApiDeleteDeviceRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).deleteDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Device\'s State History
     * @param {DeviceApiGetAllDeviceStateHistoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getAllDeviceStateHistories(requestParameters: DeviceApiGetAllDeviceStateHistoriesRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getAllDeviceStateHistories(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Child Devices
     * @param {DeviceApiGetChildDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getChildDevices(requestParameters: DeviceApiGetChildDevicesRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getChildDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Command
     * @param {DeviceApiGetCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getCommand(requestParameters: DeviceApiGetCommandRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getCommand(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Config
     * @param {DeviceApiGetConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getConfig(requestParameters: DeviceApiGetConfigRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device Configuration
     * @param {DeviceApiGetConfig0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getConfig_1(requestParameters: DeviceApiGetConfig0Request, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getConfig_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get File
     * @param {DeviceApiGetFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getFile(requestParameters: DeviceApiGetFileRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Files
     * @param {DeviceApiGetFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getFiles(requestParameters: DeviceApiGetFilesRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getFiles(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Incidents
     * @param {DeviceApiGetIncidentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getIncidents(requestParameters: DeviceApiGetIncidentsRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getIncidents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device Info
     * @param {DeviceApiGetInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getInfo(requestParameters: DeviceApiGetInfoRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device Info
     * @param {DeviceApiGetInfo0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getInfo_2(requestParameters: DeviceApiGetInfo0Request, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getInfo_2(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get License
     * @param {DeviceApiGetLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getLicense(requestParameters: DeviceApiGetLicenseRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getLicense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Licenses
     * @param {DeviceApiGetLicensesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getLicenses(requestParameters: DeviceApiGetLicensesRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getLicenses(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Space Info
     * @param {DeviceApiGetSpaceInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getSpaceInfo(requestParameters: DeviceApiGetSpaceInfoRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getSpaceInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device State History
     * @param {DeviceApiGetStateHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getStateHistory(requestParameters: DeviceApiGetStateHistoryRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getStateHistory(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device Telemetries
     * @param {DeviceApiGetTelemetriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public getTelemetries(requestParameters: DeviceApiGetTelemetriesRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).getTelemetries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Device Commands
     * @param {DeviceApiListCommandsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public listCommands(requestParameters: DeviceApiListCommandsRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).listCommands(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Devices
     * @param {DeviceApiListDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public listDevices(requestParameters: DeviceApiListDevicesRequest = {}, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).listDevices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Open Incident
     * @param {DeviceApiOpenIncidentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public openIncident(requestParameters: DeviceApiOpenIncidentRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).openIncident(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register Child Device
     * @param {DeviceApiRegisterChildDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public registerChildDevice(requestParameters: DeviceApiRegisterChildDeviceRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).registerChildDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Child Telemetries
     * @param {DeviceApiSendChildTelemetriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public sendChildTelemetries(requestParameters: DeviceApiSendChildTelemetriesRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).sendChildTelemetries(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Command
     * @param {DeviceApiSendCommandRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public sendCommand(requestParameters: DeviceApiSendCommandRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).sendCommand(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Dump
     * @param {DeviceApiSendDumpFileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public sendDumpFile(requestParameters: DeviceApiSendDumpFileRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).sendDumpFile(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Send Telemetry
     * @param {DeviceApiSendTelemetryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public sendTelemetry(requestParameters: DeviceApiSendTelemetryRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).sendTelemetry(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Config
     * @param {DeviceApiSetConfigRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public setConfig(requestParameters: DeviceApiSetConfigRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).setConfig(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set Cloud Settings
     * @param {DeviceApiUpdateCloudSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public updateCloudSettings(requestParameters: DeviceApiUpdateCloudSettingsRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).updateCloudSettings(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Device
     * @param {DeviceApiUpdateDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public updateDevice(requestParameters: DeviceApiUpdateDeviceRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).updateDevice(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update License
     * @param {DeviceApiUpdateLicenseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApiGenerated
     */
    public updateLicense(requestParameters: DeviceApiUpdateLicenseRequest, options?: AxiosRequestConfig) {
        return DeviceApiFp(this.configuration).updateLicense(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
