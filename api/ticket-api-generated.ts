/* tslint:disable */
/* eslint-disable */
/*
Testing API

Xyte's Device Cloud is the first all-in-one servitization platform designed for device and hardware manufacturers to cloudify, operate, support, and commercialize their connected devices in a unified platform. 

We enable OEMs across different industries to navigate their digital journey, transforming their devices into integrated business solutions that combine hardware, software and services. The only business and commerce platform designed specifically for IoT device manufacturers, our fully-federated Device Cloud empowers OEMs to manage the complete lifecycle of their devices, from the minute they leave the warehouse through aftermarket sales to end customers.

Our out-of-the-box applications for asset management, remote support, ecommerce and subscription management, financing, and a powerful and secure back office suite help OEMs boost revenue and market growth, optimize operational efficiencies, gain instant insights into equipment and device performance, and develop sustainable customer relationships.

The version of the OpenAPI document: 1


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TicketAddComment401Response } from '../models';
// @ts-ignore
import { TicketAddCommentRequest } from '../models';
// @ts-ignore
import { TicketAddCommentResponse } from '../models';
// @ts-ignore
import { TicketClose401Response } from '../models';
// @ts-ignore
import { TicketClose403Response } from '../models';
// @ts-ignore
import { TicketCloseResponse } from '../models';
// @ts-ignore
import { TicketGetById401Response } from '../models';
// @ts-ignore
import { TicketGetByIdResponse } from '../models';
// @ts-ignore
import { TicketList401Response } from '../models';
// @ts-ignore
import { TicketListResponseInner } from '../models';
// @ts-ignore
import { TicketUpdateTicketById401Response } from '../models';
// @ts-ignore
import { TicketUpdateTicketByIdRequest } from '../models';
// @ts-ignore
import { TicketUpdateTicketByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TicketApi - axios parameter creator
 * @export
 */
export const TicketApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Comment
         * @param {string} ticketId Unique ticket ID
         * @param {TicketAddCommentRequest} [ticketAddCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment: async (ticketId: string, ticketAddCommentRequest?: TicketAddCommentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('addComment', 'ticketId', ticketId)
            const localVarPath = `/core/v1/partner/tickets/{ticket_id}/message`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId !== undefined ? ticketId : `-ticket_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ticketAddCommentRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/tickets/{ticket_id}/message',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ticketAddCommentRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Close Ticket
         * @param {string} ticketId Unique ticket ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        close: async (ticketId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('close', 'ticketId', ticketId)
            const localVarPath = `/core/v1/partner/tickets/{ticket_id}/resolved`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId !== undefined ? ticketId : `-ticket_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/tickets/{ticket_id}/resolved',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Ticket
         * @param {string} ticketId Unique ticket ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (ticketId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('getById', 'ticketId', ticketId)
            const localVarPath = `/core/v1/partner/tickets/{ticket_id} (COPY)`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId !== undefined ? ticketId : `-ticket_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/tickets/{ticket_id} (COPY)',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/core/v1/partner/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/tickets',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Ticket
         * @param {string} ticketId Unique ticket ID
         * @param {TicketUpdateTicketByIdRequest} [ticketUpdateTicketByIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketById: async (ticketId: string, ticketUpdateTicketByIdRequest?: TicketUpdateTicketByIdRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('updateTicketById', 'ticketId', ticketId)
            const localVarPath = `/core/v1/partner/tickets/{ticket_id}`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId !== undefined ? ticketId : `-ticket_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: ticketUpdateTicketByIdRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/core/v1/partner/tickets/{ticket_id}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(ticketUpdateTicketByIdRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketApi - functional programming interface
 * @export
 */
export const TicketApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Comment
         * @param {TicketApiAddCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addComment(requestParameters: TicketApiAddCommentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketAddCommentResponse>> {
            const ticketAddCommentRequest: TicketAddCommentRequest = {
                message: requestParameters.message
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addComment(requestParameters.ticketId, ticketAddCommentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Close Ticket
         * @param {TicketApiCloseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async close(requestParameters: TicketApiCloseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketCloseResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.close(requestParameters.ticketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Ticket
         * @param {TicketApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: TicketApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.ticketId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TicketListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Ticket
         * @param {TicketApiUpdateTicketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTicketById(requestParameters: TicketApiUpdateTicketByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TicketUpdateTicketByIdResponse>> {
            const ticketUpdateTicketByIdRequest: TicketUpdateTicketByIdRequest = {
                title: requestParameters.title,
                description: requestParameters.description
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTicketById(requestParameters.ticketId, ticketUpdateTicketByIdRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TicketApi - factory interface
 * @export
 */
export const TicketApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Comment
         * @param {TicketApiAddCommentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addComment(requestParameters: TicketApiAddCommentRequest, options?: AxiosRequestConfig): AxiosPromise<TicketAddCommentResponse> {
            return localVarFp.addComment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Close Ticket
         * @param {TicketApiCloseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        close(requestParameters: TicketApiCloseRequest, options?: AxiosRequestConfig): AxiosPromise<TicketCloseResponse> {
            return localVarFp.close(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Ticket
         * @param {TicketApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: TicketApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TicketGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(options?: AxiosRequestConfig): AxiosPromise<Array<TicketListResponseInner>> {
            return localVarFp.list(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Ticket
         * @param {TicketApiUpdateTicketByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTicketById(requestParameters: TicketApiUpdateTicketByIdRequest, options?: AxiosRequestConfig): AxiosPromise<TicketUpdateTicketByIdResponse> {
            return localVarFp.updateTicketById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addComment operation in TicketApi.
 * @export
 * @interface TicketApiAddCommentRequest
 */
export type TicketApiAddCommentRequest = {
    
    /**
    * Unique ticket ID
    * @type {string}
    * @memberof TicketApiAddComment
    */
    readonly ticketId: string
    
} & TicketAddCommentRequest

/**
 * Request parameters for close operation in TicketApi.
 * @export
 * @interface TicketApiCloseRequest
 */
export type TicketApiCloseRequest = {
    
    /**
    * Unique ticket ID
    * @type {string}
    * @memberof TicketApiClose
    */
    readonly ticketId: string
    
}

/**
 * Request parameters for getById operation in TicketApi.
 * @export
 * @interface TicketApiGetByIdRequest
 */
export type TicketApiGetByIdRequest = {
    
    /**
    * Unique ticket ID
    * @type {string}
    * @memberof TicketApiGetById
    */
    readonly ticketId: string
    
}

/**
 * Request parameters for updateTicketById operation in TicketApi.
 * @export
 * @interface TicketApiUpdateTicketByIdRequest
 */
export type TicketApiUpdateTicketByIdRequest = {
    
    /**
    * Unique ticket ID
    * @type {string}
    * @memberof TicketApiUpdateTicketById
    */
    readonly ticketId: string
    
} & TicketUpdateTicketByIdRequest

/**
 * TicketApiGenerated - object-oriented interface
 * @export
 * @class TicketApiGenerated
 * @extends {BaseAPI}
 */
export class TicketApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add Comment
     * @param {TicketApiAddCommentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiGenerated
     */
    public addComment(requestParameters: TicketApiAddCommentRequest, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).addComment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Close Ticket
     * @param {TicketApiCloseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiGenerated
     */
    public close(requestParameters: TicketApiCloseRequest, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).close(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Ticket
     * @param {TicketApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiGenerated
     */
    public getById(requestParameters: TicketApiGetByIdRequest, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiGenerated
     */
    public list(options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).list(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Ticket
     * @param {TicketApiUpdateTicketByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketApiGenerated
     */
    public updateTicketById(requestParameters: TicketApiUpdateTicketByIdRequest, options?: AxiosRequestConfig) {
        return TicketApiFp(this.configuration).updateTicketById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
